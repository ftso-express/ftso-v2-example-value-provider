---

services:
  # Main service with CCXT (default)
  # ftso-value-provider-old:
  #   image: ghcr.io/flare-foundation/ftso-v2-example-value-provider:old
  #   container_name: ftso-provider-ccxt-old
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.old
  #   ports:
  #     - "0.0.0.0:3101:3101"
  #   stdin_open: true
  #   tty: true
  #   restart: unless-stopped
  #   env_file:
  #     - ./config/app/app.env
  #   environment:
  #     DATABASE_URL: postgresql://ftso_user:ftso_password@postgres:5432/ftso_db
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3101/docs"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 10s
  
  ftso-value-provider-new:
    image: ghcr.io/flare-foundation/ftso-v2-example-value-provider:new
    container_name: ftso-provider-ccxt-new
    build:
      context: .
      dockerfile: Dockerfile.new
    ports:
      - "0.0.0.0:3210:3101"
    stdin_open: true
    tty: true
    restart: unless-stopped
    env_file:
      - ./config/app/app.env
    environment:
      DATABASE_URL: postgresql://ftso_user:ftso_password@postgres:5432/ftso_db
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3101/docs"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ftso-postgres
    #environment:
    #  POSTGRES_DB: ftso_db
    #  POSTGRES_USER: ftso_user
    #  POSTGRES_PASSWORD: ftso_password
    env_file:
      - ./config/app/app.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ftso_user -d ftso_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Test service with fixed values
  ftso-provider-fixed:
    image: ghcr.io/flare-foundation/ftso-v2-example-value-provider
    container_name: ftso-provider-fixed
    ports:
      - "0.0.0.0:3102:3101"
    stdin_open: true
    tty: true
    environment:
      - VALUE_PROVIDER_IMPL=fixed
    env_file:
      - ./config/app/app.env
    profiles:
      - test

  # Test service with random values
  ftso-provider-random:
    image: ghcr.io/flare-foundation/ftso-v2-example-value-provider
    container_name: ftso-provider-random
    ports:
      - "0.0.0.0:3103:3101"
    stdin_open: true
    tty: true
    environment:
      - VALUE_PROVIDER_IMPL=random
    env_file:
      - ./config/app/app.env
    profiles:
      - test

  # Test runner service - runs curl tests against the providers
  test-runner:
    image: curlimages/curl:latest
    container_name: ftso-test-runner
    depends_on:
      ftso-value-provider:
        condition: service_healthy
    command: >
      sh -c '
      GREEN="\033[0;32m";
      BLUE="\033[0;34m";
      YELLOW="\033[1;33m";
      RED="\033[0;31m";
      CYAN="\033[0;36m";
      BOLD="\033[1m";
      RESET="\033[0m";

      echo "${CYAN}${BOLD}========================================${RESET}";
      echo "${CYAN}${BOLD}  FTSO Value Provider Test Suite${RESET}";
      echo "${CYAN}${BOLD}========================================${RESET}";
      echo "";
      echo "${BLUE}Testing main CCXT provider on port 3101...${RESET}";
      echo "";

      echo "${YELLOW}${BOLD}=== Test 1: Feed values with voting round ID ===${RESET}";
      response=$(curl -s -X POST http://ftso-value-provider:3101/feed-values/0 \
        -H "accept: application/json" \
        -H "Content-Type: application/json" \
        -d "{\"feeds\": [{\"category\": 1, \"name\": \"BTC/USD\"}]}" \
        -w "\n%{http_code}");
      status=$(echo "$response" | tail -n1);
      body=$(echo "$response" | head -n-1);
      echo "${GREEN}Response:${RESET} $body";
      if [ "$status" = "201" ] || [ "$status" = "200" ]; then
        echo "${GREEN}✓ Status: $status${RESET}";
      else
        echo "${RED}✗ Status: $status${RESET}";
      fi;
      echo "";

      echo "${YELLOW}${BOLD}=== Test 2: Latest feed values (no voting round) ===${RESET}";
      response=$(curl -s -X POST http://ftso-value-provider:3101/feed-values/ \
        -H "accept: application/json" \
        -H "Content-Type: application/json" \
        -d "{\"feeds\": [{\"category\": 1, \"name\": \"BTC/USD\"}]}" \
        -w "\n%{http_code}");
      status=$(echo "$response" | tail -n1);
      body=$(echo "$response" | head -n-1);
      echo "${GREEN}Response:${RESET} $body";
      if [ "$status" = "201" ] || [ "$status" = "200" ]; then
        echo "${GREEN}✓ Status: $status${RESET}";
      else
        echo "${RED}✗ Status: $status${RESET}";
      fi;
      echo "";

      echo "${YELLOW}${BOLD}=== Test 3: Multiple feeds ===${RESET}";
      response=$(curl -s -X POST http://ftso-value-provider:3101/feed-values/0 \
        -H "accept: application/json" \
        -H "Content-Type: application/json" \
        -d "{\"feeds\": [{\"category\": 1, \"name\": \"BTC/USD\"}, {\"category\": 1, \"name\": \"ETH/USD\"}]}" \
        -w "\n%{http_code}");
      status=$(echo "$response" | tail -n1);
      body=$(echo "$response" | head -n-1);
      echo "${GREEN}Response:${RESET} $body";
      if [ "$status" = "201" ] || [ "$status" = "200" ]; then
        echo "${GREEN}✓ Status: $status${RESET}";
      else
        echo "${RED}✗ Status: $status${RESET}";
      fi;
      echo "";

      echo "${CYAN}${BOLD}========================================${RESET}";
      echo "${GREEN}${BOLD}✓ All tests completed successfully!${RESET}";
      echo "${CYAN}${BOLD}========================================${RESET}";
      '
    profiles:
      - test

volumes:
  postgres_data:
